/* The following code was generated by JFlex 1.6.1 */

/*----------------------------------------------------------------------------
--------------------- 1ra. Area: Codigo de Usuario
----------------------------------------------------------------------------*/

//-------> Paquete, importaciones

package Analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.LinkedList;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>A_Lexico.jflex</tt>
 */
public class ALexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  5, 36, 36,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     5,  0,  0,  0,  0,  0,  0,  0,  8,  9, 11, 10,  6,  0,  3, 12, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  7,  0,  0,  0, 13, 
     0, 15, 29, 30, 20, 21, 19, 23,  2, 17,  2,  2, 28, 14, 18, 27, 
    31,  2, 22, 25, 26, 32, 33,  2, 35,  2, 34,  0,  0,  0,  0,  4, 
     0, 15, 29, 30, 20, 21, 19, 23,  2, 17,  2,  2, 28, 14, 18, 27, 
    31,  2, 22, 25, 26, 32, 33,  2, 35,  2, 34,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0, 36,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\3\1\1"+
    "\10\3\1\0\1\3\1\0\1\3\1\16\1\3\1\0"+
    "\1\3\1\0\1\3\1\0\2\3\1\17\1\0\6\3"+
    "\1\2\1\0\1\3\1\0\3\3\1\0\1\3\2\20"+
    "\1\0\1\3\1\21\1\3\1\0\6\3\1\0\1\3"+
    "\2\22\1\0\1\3\1\23\1\3\1\0\1\3\1\0"+
    "\2\3\1\0\6\3\1\0\1\3\1\0\2\3\1\0"+
    "\1\3\1\0\2\3\1\0\2\3\1\0\4\3\2\24"+
    "\1\0\2\3\1\0\1\3\1\0\2\3\1\25\1\0"+
    "\1\3\1\0\1\3\1\0\4\3\1\0\2\3\1\0"+
    "\1\3\1\0\1\3\1\26\2\0\2\3\2\27\1\0"+
    "\4\3\1\0\4\3\1\0\1\3\1\0\1\3\2\0"+
    "\2\3\2\30\3\3\1\0\2\3\1\0\3\3\1\0"+
    "\1\3\1\0\1\3\2\0\2\3\1\31\2\3\1\0"+
    "\2\3\1\0\3\3\1\0\1\3\2\32\2\0\4\3"+
    "\1\0\2\3\1\0\3\3\1\0\1\3\1\0\1\33"+
    "\1\3\1\33\1\34\1\0\1\3\2\35\1\3\1\0"+
    "\2\3\1\0\1\3\2\36\1\0\1\3\1\0\2\3"+
    "\1\0\1\3\1\0\1\3\1\0\1\3\2\37\2\40"+
    "\1\3\2\41\1\0\1\3\1\0\1\3\1\42\1\0"+
    "\1\3\1\0\1\3\2\43\1\0\1\3\2\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\45\0\45\0\45\0\45"+
    "\0\45\0\45\0\45\0\45\0\45\0\45\0\224\0\271"+
    "\0\336\0\u0103\0\u0128\0\u014d\0\u0172\0\u0197\0\u01bc\0\u01e1"+
    "\0\u0206\0\u022b\0\u0250\0\u0275\0\u029a\0\u02bf\0\u02e4\0\u0309"+
    "\0\u032e\0\u0353\0\u0378\0\u039d\0\u03c2\0\u03e7\0\u040c\0\u0431"+
    "\0\u0456\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f\0\u022b\0\u0534"+
    "\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637\0\45"+
    "\0\157\0\u065c\0\u0681\0\157\0\u06a6\0\u06cb\0\u06f0\0\u0715"+
    "\0\u073a\0\u075f\0\u0784\0\u07a9\0\u07ce\0\u07f3\0\45\0\157"+
    "\0\u0818\0\u083d\0\157\0\u0862\0\u0887\0\u08ac\0\u08d1\0\u08f6"+
    "\0\u091b\0\u0940\0\u0965\0\u098a\0\u09af\0\u09d4\0\u09f9\0\u0a1e"+
    "\0\u0a43\0\u0a68\0\u0a8d\0\u0ab2\0\u0ad7\0\u0afc\0\u0b21\0\u0b46"+
    "\0\u0b6b\0\u0b90\0\u0bb5\0\u0bda\0\u0bff\0\u0c24\0\u0c49\0\u0c6e"+
    "\0\u0c93\0\u0cb8\0\45\0\157\0\u0cdd\0\u0d02\0\u0d27\0\u0d4c"+
    "\0\u0d71\0\u0d96\0\u0dbb\0\u0de0\0\157\0\u0e05\0\u0e2a\0\u0e4f"+
    "\0\u0e74\0\u0e99\0\u0ebe\0\u0ee3\0\u0f08\0\u0f2d\0\u0f52\0\u0f77"+
    "\0\u0f9c\0\u0fc1\0\u0fe6\0\u100b\0\u1030\0\157\0\u1055\0\u107a"+
    "\0\u109f\0\u10c4\0\45\0\157\0\u10e9\0\u110e\0\u1133\0\u1158"+
    "\0\u117d\0\u11a2\0\u11c7\0\u11ec\0\u1211\0\u1236\0\u125b\0\u1280"+
    "\0\u12a5\0\u12ca\0\u12ef\0\u1314\0\u1339\0\u135e\0\45\0\157"+
    "\0\u1383\0\u13a8\0\u13cd\0\u13f2\0\u1417\0\u143c\0\u1461\0\u1486"+
    "\0\u14ab\0\u14d0\0\u14f5\0\u151a\0\u153f\0\u1564\0\u1589\0\u15ae"+
    "\0\u15d3\0\u15f8\0\157\0\u161d\0\u1642\0\u1667\0\u168c\0\u16b1"+
    "\0\u16d6\0\u16fb\0\u1720\0\u1745\0\u176a\0\u178f\0\45\0\157"+
    "\0\u17b4\0\u17d9\0\u17fe\0\u1823\0\u1848\0\u186d\0\u1892\0\u18b7"+
    "\0\u18dc\0\u1901\0\u1926\0\u194b\0\u1970\0\u1995\0\u19ba\0\u19df"+
    "\0\45\0\u1a04\0\157\0\157\0\u1a29\0\u1a4e\0\45\0\157"+
    "\0\u1a73\0\u1a98\0\u1abd\0\u1ae2\0\u1b07\0\u1b2c\0\45\0\157"+
    "\0\u1b51\0\u1b76\0\u1b9b\0\u1bc0\0\u1be5\0\u1c0a\0\u1c2f\0\u1c54"+
    "\0\u1c79\0\u1c9e\0\u1cc3\0\45\0\157\0\45\0\157\0\u1ce8"+
    "\0\45\0\157\0\u1d0d\0\u1d32\0\u1d57\0\u1d7c\0\157\0\u1da1"+
    "\0\u1dc6\0\u1deb\0\u1e10\0\45\0\157\0\u1e35\0\u1e5a\0\45"+
    "\0\157";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\4\1\23\1\24\1\25\1\26\1\27"+
    "\1\2\5\4\1\30\1\4\1\31\3\4\47\0\1\3"+
    "\1\0\1\32\42\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\7\4\1\0\13\4\2\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\33\1\34\1\35\6\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\2\4"+
    "\1\36\3\4\1\37\1\0\13\4\23\0\1\40\23\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\1\4\1\41"+
    "\5\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\42\1\43\6\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\44\1\45\3\4\1\46"+
    "\2\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\5\4\1\47\1\4\1\50\1\51\12\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\4\4"+
    "\1\52\2\4\1\0\13\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\5\4\1\53\1\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\4\4"+
    "\1\54\2\4\1\0\2\4\1\55\10\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\1\4\1\56\5\4"+
    "\1\0\13\4\2\0\1\57\44\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\60\1\61\6\4\1\0\13\4\23\0"+
    "\1\62\23\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\1\4\1\63\5\4\1\0\13\4\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\1\4\1\64\5\4\1\0"+
    "\13\4\2\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\5\4\1\65\1\4\1\0\13\4\33\0\1\66\13\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\7\4\1\0"+
    "\1\4\1\67\11\4\23\0\1\70\23\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\1\4\1\71\5\4\1\0"+
    "\13\4\24\0\1\72\22\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\2\4\1\73\4\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\2\4\1\74"+
    "\4\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\1\4\1\75\1\0\7\4\1\0\13\4\33\0\1\76"+
    "\13\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\1\4\1\77\11\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\10\4\1\100\2\4"+
    "\2\0\2\4\1\0\1\4\11\0\1\4\1\101\1\0"+
    "\7\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\5\4\1\102\1\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\1\103\1\4\1\0\1\4"+
    "\1\104\5\4\1\0\13\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\105\1\106\6\4\1\0\13\4\23\0"+
    "\1\107\23\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\1\4\1\110\5\4\1\0\13\4\21\0\2\111\24\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\111\1\112\6\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\3\4\1\113\3\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\4\4\1\114\2\4"+
    "\1\0\13\4\26\0\1\115\20\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\4\4\1\116\2\4\1\0\13\4"+
    "\26\0\1\117\20\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\4\4\1\120\2\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\1\4\1\121\1\0\7\4\1\0"+
    "\13\4\20\0\1\122\26\0\2\4\1\0\1\4\11\0"+
    "\1\4\1\123\1\0\7\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\4\4\1\124\2\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\2\4\1\125\4\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\5\4\1\126\1\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\7\4\1\0\6\4\1\127\4\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\5\4"+
    "\1\130\5\4\34\0\1\131\12\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\2\4\1\132\10\4"+
    "\17\0\1\133\27\0\2\4\1\0\1\4\11\0\1\134"+
    "\1\4\1\0\7\4\1\0\13\4\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\6\4\1\135\1\0\13\4"+
    "\27\0\1\136\17\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\5\4\1\137\1\4\1\0\13\4\27\0\1\140"+
    "\17\0\2\4\1\0\1\4\11\0\2\4\1\0\5\4"+
    "\1\141\1\4\1\0\13\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\2\4\1\142\4\4\1\0\13\4"+
    "\25\0\1\143\21\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\3\4\1\144\3\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\5\4\1\145\1\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\146\1\147\6\4\1\0\13\4\2\0\2\4\1\0"+
    "\1\4\11\0\1\4\1\150\1\0\7\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\3\4\1\151\7\4\2\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\152\1\0\7\4\1\0\13\4\23\0"+
    "\1\153\23\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\1\4\1\154\5\4\1\0\13\4\21\0\2\155\24\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\155\1\156\6\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\1\4"+
    "\1\157\1\0\7\4\1\0\13\4\31\0\2\160\14\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\7\4\1\160"+
    "\1\161\12\4\26\0\1\162\20\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\4\4\1\163\2\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\1\4"+
    "\1\164\1\4\1\165\3\4\1\0\13\4\34\0\1\166"+
    "\12\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\2\4\1\167\10\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\170\1\171\12\4\37\0"+
    "\1\172\7\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\7\4\1\0\5\4\1\173\5\4\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\3\4\1\174\3\4\1\0"+
    "\13\4\2\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\4\4\1\175\2\4\1\0\13\4\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\7\4\1\0\1\4\1\176"+
    "\11\4\43\0\1\177\3\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\7\4\1\0\11\4\1\200\1\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\5\4\1\201"+
    "\1\4\1\0\13\4\26\0\1\202\20\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\4\4\1\203\2\4\1\0"+
    "\13\4\23\0\1\204\23\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\1\4\1\205\5\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\3\4\1\206"+
    "\3\4\1\0\13\4\21\0\2\207\1\0\1\210\22\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\207\1\211\1\4"+
    "\1\212\4\4\1\0\13\4\34\0\1\213\12\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\214\10\4\20\0\1\215\26\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\216\1\0\7\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\7\4\1\0"+
    "\7\4\1\217\3\4\2\0\2\4\1\0\1\4\11\0"+
    "\1\220\1\4\1\0\7\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\4\4\1\221\2\4"+
    "\1\0\13\4\20\0\1\222\26\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\223\1\0\7\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\1\4\1\224\1\0\4\4"+
    "\1\225\2\4\1\0\1\4\1\226\11\4\37\0\1\227"+
    "\7\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\5\4\1\230\5\4\37\0\1\231\7\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\5\4"+
    "\1\232\5\4\23\0\1\233\42\0\2\234\24\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\1\4\1\235\5\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\234\1\236\6\4\1\0\13\4\27\0\1\237\17\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\5\4\1\240"+
    "\1\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\5\4\1\241\1\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\4\4\1\242"+
    "\2\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\1\4\1\243\5\4\1\0\13\4\37\0"+
    "\1\244\7\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\7\4\1\0\5\4\1\245\5\4\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\7\4\1\0\3\4\1\246"+
    "\7\4\2\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\7\4\1\247\1\250\11\4\1\251\2\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\5\4\1\252\1\4\1\0"+
    "\13\4\37\0\1\253\7\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\7\4\1\0\5\4\1\254\5\4\21\0"+
    "\2\255\24\0\2\4\1\0\1\4\11\0\2\4\1\255"+
    "\1\256\6\4\1\0\13\4\21\0\2\257\45\0\1\260"+
    "\23\0\2\4\1\0\1\4\11\0\2\4\1\257\1\261"+
    "\6\4\1\0\13\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\1\4\1\262\5\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\1\4\1\263\1\0\7\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\1\4\1\264\5\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\1\4\1\265\1\0\7\4\1\0"+
    "\13\4\21\0\2\266\24\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\266\1\267\6\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\2\4\1\270\4\4"+
    "\1\0\13\4\33\0\1\271\13\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\1\4\1\272\11\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\6\4\1\273\4\4\2\0\2\4\1\0\1\4"+
    "\11\0\1\4\1\274\1\0\7\4\1\0\13\4\21\0"+
    "\2\275\24\0\2\4\1\0\1\4\11\0\2\4\1\275"+
    "\1\276\6\4\1\0\13\4\20\0\1\277\26\0\2\4"+
    "\1\0\1\4\11\0\1\4\1\300\1\0\7\4\1\0"+
    "\13\4\37\0\1\301\25\0\1\302\26\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\7\4\1\0\5\4\1\303"+
    "\5\4\2\0\2\4\1\0\1\4\11\0\1\4\1\304"+
    "\1\0\7\4\1\0\13\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\1\4\1\305\11\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\5\4\1\306\5\4\34\0\1\307\12\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\310\10\4\2\0\2\4\1\0\1\4\11\0\1\4"+
    "\1\311\1\0\7\4\1\0\13\4\20\0\1\312\26\0"+
    "\2\4\1\0\1\4\11\0\1\4\1\313\1\0\7\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\5\4\1\314\1\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\1\4\1\315\5\4"+
    "\1\0\13\4\34\0\1\316\12\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\2\4\1\317\10\4"+
    "\21\0\2\320\57\0\1\321\11\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\320\1\322\6\4\1\0\13\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\0\7\4\1\0"+
    "\3\4\1\323\7\4\2\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\7\4\1\0\2\4\1\324\10\4\2\0"+
    "\2\4\1\0\1\4\11\0\2\4\1\325\1\326\6\4"+
    "\1\0\13\4\23\0\1\327\23\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\1\4\1\330\5\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\4\4\1\331\6\4\25\0\1\332\21\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\3\4\1\333\3\4"+
    "\1\0\13\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\4\4\1\334\2\4\1\0\13\4\2\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\335\1\336"+
    "\12\4\23\0\1\337\23\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\1\4\1\340\5\4\1\0\13\4\20\0"+
    "\1\341\26\0\2\4\1\0\1\4\11\0\1\4\1\342"+
    "\1\0\7\4\1\0\13\4\34\0\1\343\12\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\2\4"+
    "\1\344\10\4\2\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\4\4\1\345\2\4\1\0\13\4\34\0\1\346"+
    "\12\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\2\4\1\347\10\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\350\1\351\12\4\21\0"+
    "\2\352\24\0\2\4\1\0\1\4\11\0\2\4\1\352"+
    "\1\353\6\4\1\0\13\4\35\0\1\354\11\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\0\3\4"+
    "\1\355\7\4\23\0\1\356\23\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\1\4\1\357\5\4\1\0\13\4"+
    "\2\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\1\4\1\360\11\4\31\0\2\361\14\0\2\4"+
    "\1\0\1\4\11\0\2\4\1\0\7\4\1\361\1\362"+
    "\12\4\21\0\2\363\24\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\363\1\364\6\4\1\0\13\4\37\0\1\365"+
    "\7\0\2\4\1\0\1\4\11\0\2\4\1\0\7\4"+
    "\1\0\5\4\1\366\5\4\2\0\2\4\1\0\1\4"+
    "\11\0\2\4\1\0\7\4\1\0\2\4\1\367\10\4"+
    "\34\0\1\370\12\0\2\4\1\0\1\4\11\0\2\4"+
    "\1\0\7\4\1\0\2\4\1\371\10\4\21\0\2\372"+
    "\24\0\2\4\1\0\1\4\11\0\2\4\1\372\1\373"+
    "\6\4\1\0\13\4\23\0\1\374\23\0\2\4\1\0"+
    "\1\4\11\0\2\4\1\0\1\4\1\375\5\4\1\0"+
    "\13\4\34\0\1\376\12\0\2\4\1\0\1\4\11\0"+
    "\2\4\1\0\7\4\1\0\2\4\1\377\10\4\23\0"+
    "\1\u0100\23\0\2\4\1\0\1\4\11\0\2\4\1\0"+
    "\1\4\1\u0101\5\4\1\0\13\4\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7807];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\12\11\13\1\1\0\1\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\1\1\0\3\1\1\0"+
    "\7\1\1\0\1\1\1\0\3\1\1\0\1\1\1\11"+
    "\1\1\1\0\3\1\1\0\6\1\1\0\1\1\1\11"+
    "\1\1\1\0\3\1\1\0\1\1\1\0\2\1\1\0"+
    "\6\1\1\0\1\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\1\0\2\1\1\0\4\1\1\11\1\1\1\0"+
    "\2\1\1\0\1\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\1\0\4\1\1\0\2\1\1\0\1\1\1\0"+
    "\2\1\2\0\2\1\1\11\1\1\1\0\4\1\1\0"+
    "\4\1\1\0\1\1\1\0\1\1\2\0\2\1\1\11"+
    "\4\1\1\0\2\1\1\0\3\1\1\0\1\1\1\0"+
    "\1\1\2\0\5\1\1\0\2\1\1\0\3\1\1\0"+
    "\1\1\1\11\1\1\2\0\4\1\1\0\2\1\1\0"+
    "\3\1\1\0\1\1\1\0\1\11\3\1\1\0\1\1"+
    "\1\11\2\1\1\0\2\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[257];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    String cadena="";
    String cad="";
    public static LinkedList<AcepErr> TablaErr=new LinkedList<AcepErr>();
    Archivos archivo = new Archivos();
    


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ALexico(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Simbolos.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { System.out.println("Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"] Simbolo no existe en el lenguaje");
                                cad = "Error Lexico: <<"+yytext()+">> ["+yyline+" , "+yycolumn+"] Simbolo no existe en el lenguaje";
                                             archivo.escribirErrorLexico(cad);
            }
          case 37: break;
          case 2: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id ");
                                              cadena = "Reconocido: <<"+yytext()+">>, id";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 38: break;
          case 3: 
            { System.out.println("Reconocido: <<"+yytext()+">>, id ");
                                          cadena = "Reconocido: <<"+yytext()+">>, id";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.id, yycolumn, yyline, yytext());
            }
          case 39: break;
          case 4: 
            { System.out.println("Reconocido: <<"+yytext()+">>, punto");
                            cadena = "Reconocido: <<"+yytext()+">>, punto";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.punto, yycolumn, yyline, yytext());
            }
          case 40: break;
          case 5: 
            { /* ignore white space. */
            }
          case 41: break;
          case 6: 
            { System.out.println("Reconocido: <<"+yytext()+">>, coma");
                            cadena = "Reconocido: <<"+yytext()+">>, coma";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.coma, yycolumn, yyline, yytext());
            }
          case 42: break;
          case 7: 
            { System.out.println("Reconocido: <<"+yytext()+">>, puntocoma");
                            cadena = "Reconocido: <<"+yytext()+">>, puntocoma";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.puntocoma, yycolumn, yyline, yytext());
            }
          case 43: break;
          case 8: 
            { System.out.println("Reconocido: <<"+yytext()+">>, apar");
                            cadena = "Reconocido: <<"+yytext()+">>, apar";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.apar, yycolumn, yyline, yytext());
            }
          case 44: break;
          case 9: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cpar");
                            cadena = "Reconocido: <<"+yytext()+">>, cpar";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.cpar, yycolumn, yyline, yytext());
            }
          case 45: break;
          case 10: 
            { System.out.println("Reconocido: <<"+yytext()+">>, uno_o_mas");
                            cadena = "Reconocido: <<"+yytext()+">>, uno_o_mas";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.uno_o_mas, yycolumn, yyline, yytext());
            }
          case 46: break;
          case 11: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cero_o_mas");
                            cadena = "Reconocido: <<"+yytext()+">>, cero_o_mas";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.cero_o_mas, yycolumn, yyline, yytext());
            }
          case 47: break;
          case 12: 
            { System.out.println("Reconocido: <<"+yytext()+">>, or");
                            cadena = "Reconocido: <<"+yytext()+">>, or";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.or, yycolumn, yyline, yytext());
            }
          case 48: break;
          case 13: 
            { System.out.println("Reconocido: <<"+yytext()+">>, cero_o_uno");
                            cadena = "Reconocido: <<"+yytext()+">>, cero_o_uno";
                            archivo.escribirAceptados(cadena);
                            return new Symbol(Simbolos.cero_o_uno, yycolumn, yyline, yytext());
            }
          case 49: break;
          case 14: 
            { System.out.println("Reconocido: <<"+yytext()+">>, AF");
                                      cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada  AF";
                                      archivo.escribirAceptados(cadena);
                                      return new Symbol(Simbolos.AF, yycolumn, yyline, yytext());
            }
          case 50: break;
          case 15: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ER");
                                  cadena = "Reconocido: <<"+yytext()+">>,  Palabra Reservada ER";
                                  archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.ER, yycolumn, yyline, yytext());
            }
          case 51: break;
          case 16: 
            { System.out.println("Reconocido: <<"+yytext()+">>, FIN");
                                cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada FIN";
                                archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.FIN, yycolumn, yyline, yytext());
            }
          case 52: break;
          case 17: 
            { System.out.println("Reconocido: <<"+yytext()+">>, DEF");
                                cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada DEF";
                                archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.DEF, yycolumn, yyline, yytext());
            }
          case 53: break;
          case 18: 
            { System.out.println("Reconocido: <<"+yytext()+">>, MAIN");
                                cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada MAIN";
                                archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.MAIN, yycolumn, yyline, yytext());
            }
          case 54: break;
          case 19: 
            { System.out.println("Reconocido: <<"+yytext()+">>, AFND");
                                       cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada AFND";
                                       archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.AFND, yycolumn, yyline, yytext());
            }
          case 55: break;
          case 20: 
            { System.out.println("Reconocido: <<"+yytext()+">>, union");
                                           cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada union";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.union, yycolumn, yyline, yytext());
            }
          case 56: break;
          case 21: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ERaAFD");
                                      cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada ERaAFD";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.ERaAFD, yycolumn, yyline, yytext());
            }
          case 57: break;
          case 22: 
            { System.out.println("Reconocido: <<"+yytext()+">>, ERaAFND");
                                    cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada ERaAFND";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.ERaAFND, yycolumn, yyline, yytext());
            }
          case 58: break;
          case 23: 
            { System.out.println("Reconocido: <<"+yytext()+">>, reverso");
                                        cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada reverso";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.reverso, yycolumn, yyline, yytext());
            }
          case 59: break;
          case 24: 
            { System.out.println("Reconocido: <<"+yytext()+">>, graficar");
                                            cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada graficar";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.graficar, yycolumn, yyline, yytext());
            }
          case 60: break;
          case 25: 
            { System.out.println("Reconocido: <<"+yytext()+">>,cerradura");
                                             cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada cerradura";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.cerradura, yycolumn, yyline, yytext());
            }
          case 61: break;
          case 26: 
            { System.out.println("Reconocido: <<"+yytext()+">>, diferencia");
                                             cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada diferencia";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.diferencia, yycolumn, yyline, yytext());
            }
          case 62: break;
          case 27: 
            { System.out.println("Reconocido: <<"+yytext()+">>,EstadoFinal");
                                             cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada EstadoFinal";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.EstadoFinal, yycolumn, yyline, yytext());
            }
          case 63: break;
          case 28: 
            { System.out.println("Reconocido: <<"+yytext()+">>, complemento");
                                       cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada complemento";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.complemento, yycolumn, yyline, yytext());
            }
          case 64: break;
          case 29: 
            { System.out.println("Reconocido: <<"+yytext()+">>, minimizacion");
                                               cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada minimizacion";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.minimizacion, yycolumn, yyline, yytext());
            }
          case 65: break;
          case 30: 
            { System.out.println("Reconocido: <<"+yytext()+">>, interseccion");
                                                cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada interseccion";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.interseccion, yycolumn, yyline, yytext());
            }
          case 66: break;
          case 31: 
            { System.out.println("Reconocido: <<"+yytext()+">>,EstadoInicial");
                                             cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada EstadoInicial";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.EstadoInicial, yycolumn, yyline, yytext());
            }
          case 67: break;
          case 32: 
            { System.out.println("Reconocido: <<"+yytext()+">>, concatenacion");
                                                 cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada concatenacion";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.concatenacion, yycolumn, yyline, yytext());
            }
          case 68: break;
          case 33: 
            { System.out.println("Reconocido: <<"+yytext()+">>, agregarEstados");
                                                 cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada agregarEstados";
                                                 archivo.escribirAceptados(cadena);
                                                 return new Symbol(Simbolos.agregarEstados, yycolumn, yyline, yytext());
            }
          case 69: break;
          case 34: 
            { System.out.println("Reconocido: <<"+yytext()+">>, agregarAlfabeto");
                                             cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada agregarAlfabeto";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.agregarAlfabeto, yycolumn, yyline, yytext());
            }
          case 70: break;
          case 35: 
            { System.out.println("Reconocido: <<"+yytext()+">>, agregarexpresion");
                                                    cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada agregarexpresion";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.agregarexpresion, yycolumn, yyline, yytext());
            }
          case 71: break;
          case 36: 
            { System.out.println("Reconocido: <<"+yytext()+">>, agregarTransicion");
                                           cadena = "Reconocido: <<"+yytext()+">>, Palabra Reservada agregarTransicion";
                                             archivo.escribirAceptados(cadena);
                                return new Symbol(Simbolos.agregarTransicion, yycolumn, yyline, yytext());
            }
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
